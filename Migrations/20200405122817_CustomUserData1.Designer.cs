// <auto-generated />
using System;
using FinalExamNew.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinalExamNew.Migrations
{
    [DbContext(typeof(FinalExamNewContext))]
    [Migration("20200405122817_CustomUserData1")]
    partial class CustomUserData1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinalExamNew.Areas.Identity.Data.FinalExamNewUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DatumRodjenja");

                    b.Property<DateTime>("DatumUclanjenja");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Ime");

                    b.Property<string>("JMBG");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Prezime");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UlicaIBroj");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FinalExamNew.Dal.Cena", b =>
                {
                    b.Property<string>("CenaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Valuta");

                    b.Property<decimal>("Vrednost")
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("CenaId");

                    b.ToTable("Cena");
                });

            modelBuilder.Entity("FinalExamNew.Dal.KljucnaRec", b =>
                {
                    b.Property<string>("KljucnaRecId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Rec");

                    b.HasKey("KljucnaRecId");

                    b.ToTable("KljucnaRec");
                });

            modelBuilder.Entity("FinalExamNew.Dal.KljucneReciOglasa", b =>
                {
                    b.Property<string>("KljucneReciOglasaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("KljucnaRecId1");

                    b.Property<string>("OglasId1");

                    b.HasKey("KljucneReciOglasaId");

                    b.HasIndex("KljucnaRecId1");

                    b.HasIndex("OglasId1");

                    b.ToTable("KljucneReciOglasa");
                });

            modelBuilder.Entity("FinalExamNew.Dal.Oglas", b =>
                {
                    b.Property<string>("OglasId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CenaId");

                    b.Property<DateTime>("DatumKreiranja");

                    b.Property<string>("Naslov");

                    b.Property<string>("Tekst");

                    b.Property<string>("UserId");

                    b.HasKey("OglasId");

                    b.HasIndex("CenaId");

                    b.HasIndex("UserId");

                    b.ToTable("Oglas");
                });

            modelBuilder.Entity("FinalExamNew.Dal.Oglasavanje", b =>
                {
                    b.Property<string>("OglasavanjeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DatumDo");

                    b.Property<DateTime>("DatumOd");

                    b.Property<string>("OglasId");

                    b.Property<string>("TipOglasaId1");

                    b.HasKey("OglasavanjeId");

                    b.HasIndex("OglasId");

                    b.HasIndex("TipOglasaId1");

                    b.ToTable("Oglasavanje");
                });

            modelBuilder.Entity("FinalExamNew.Dal.Slika", b =>
                {
                    b.Property<string>("SlikaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdresaSlike");

                    b.Property<string>("NaslovSlike");

                    b.Property<string>("OglasId1");

                    b.Property<DateTime>("VremePostavljanjaSlike");

                    b.HasKey("SlikaId");

                    b.HasIndex("OglasId1");

                    b.ToTable("Slika");
                });

            modelBuilder.Entity("FinalExamNew.Dal.TipOglasa", b =>
                {
                    b.Property<string>("TipOglasaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CenaId");

                    b.Property<string>("NazivTipaOglasa");

                    b.HasKey("TipOglasaId");

                    b.HasIndex("CenaId");

                    b.ToTable("TipOglasa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FinalExamNew.Dal.KljucneReciOglasa", b =>
                {
                    b.HasOne("FinalExamNew.Dal.KljucnaRec", "KljucnaRec")
                        .WithMany("KljucneReciOglasa")
                        .HasForeignKey("KljucnaRecId1");

                    b.HasOne("FinalExamNew.Dal.Oglas", "Oglas")
                        .WithMany("KljucneReciOglasa")
                        .HasForeignKey("OglasId1");
                });

            modelBuilder.Entity("FinalExamNew.Dal.Oglas", b =>
                {
                    b.HasOne("FinalExamNew.Dal.Cena", "Cena")
                        .WithMany()
                        .HasForeignKey("CenaId");

                    b.HasOne("FinalExamNew.Areas.Identity.Data.FinalExamNewUser", "User")
                        .WithMany("Oglasi")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FinalExamNew.Dal.Oglasavanje", b =>
                {
                    b.HasOne("FinalExamNew.Dal.Oglas", "Oglas")
                        .WithMany("Oglasavanja")
                        .HasForeignKey("OglasId");

                    b.HasOne("FinalExamNew.Dal.TipOglasa", "TipOglasa")
                        .WithMany("Oglasavanja")
                        .HasForeignKey("TipOglasaId1");
                });

            modelBuilder.Entity("FinalExamNew.Dal.Slika", b =>
                {
                    b.HasOne("FinalExamNew.Dal.Oglas", "Oglas")
                        .WithMany("Slike")
                        .HasForeignKey("OglasId1");
                });

            modelBuilder.Entity("FinalExamNew.Dal.TipOglasa", b =>
                {
                    b.HasOne("FinalExamNew.Dal.Cena", "Cena")
                        .WithMany()
                        .HasForeignKey("CenaId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalExamNew.Areas.Identity.Data.FinalExamNewUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalExamNew.Areas.Identity.Data.FinalExamNewUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalExamNew.Areas.Identity.Data.FinalExamNewUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalExamNew.Areas.Identity.Data.FinalExamNewUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
